enrich {
  # Sources currently supported are:
  # 'kinesis' for reading Thrift-serialized records from a Kinesis stream
  # 'stdin' for writing Base64-encoded Thrift-serialized records to stdout
  source = "stdin"

  # Sinks currently supported are:
  # 'kinesis' for writing Thrift-serialized records to a Kinesis stream
  # 'stdouterr' for writing Base64-encoded Thrift-serialized enriched
  #    events to stdout and invalid events to stderr.
  #    Using `sbt assembly` and `java -jar` is recommended to disable sbt
  #    logging.
  sink = "stdouterr"

  aws {
    access-key: "cpf"
    secret-key: "cpf"
  }

  streams {
    in: {
      raw: "SnowplowRaw"


      # After enrichment, are accumulated in a buffer before being sent to Kinesis.
      # The buffer is emptied whenever:
      # - the number of stored records reaches record-limit or
      # - the combined size of the stored records reaches byte-limit or
      # - the time in milliseconds since it was last emptied exceeds time-limit when
      #   a new event enters the buffer
      buffer: {
        byte-limit: 2048
        record-limit: 1
        time-limit: 500
      }
    }
    out: {
      enriched: "SnowplowEnriched"
      enriched_shards: 1 # Number of shards to use if created.
      bad: "SnowplowBad" # Not used until #463
      bad_shards: 1 # Number of shards to use if created.

      backoffPolicy: {
        minBackoff: 3000 # 3 seconds
        maxBackoff: 600000 # 5 minutes
      }
    }

    # `app-name` is used for a DynamoDB table to maintain stream state.
    app-name: SnowplowKinesisEnrich-${enrich.streams.in.raw}

    # LATEST: most recent data.
    # TRIM_HORIZON: oldest available data.
    # Note: This only effects the first run of this application
    # on a stream.
    initial-position = "TRIM_HORIZON"

    endpoint: "https://kinesis.us-east-1.amazonaws.com"
    region: "us-east-1"
  }
}
